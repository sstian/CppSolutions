//模板类PFArray的接口文件
//基本类型T部分填充该类型的对象
#ifndef PFARRAY_H
#define PFARRAY_H

namespace PFArraySavitch
{
	template <class T>
	class PFArray
	{
	public:
		PFArray();           //数组的初始大小为50。
		PFArray(int capacityValue);
		PFArray(const PFArray<T>& pfaObject);
		void addElement(T element);
		//前提条件：数组中存在没有值得元素。
		//执行结果：数组中没有值的地方被赋值。
		bool full() const;
		//如果数组已经填满，返回true，否则返回false。
		int getCapacity() const;
		int getNumberUsed() const;
		void emptyArray();
		//将数组中有值的元素设为0，有效清空数组。
		T& operator [](int index);
		//对从0到NumberUsed-1序号的数组元素进行读和修改值得操作。
		PFArray<T>& operator =(const PFArray<T>& rightSide);
		virtual ~PFArray();
	private:
		T *a;           //指明T类型的数组
		int capacity;   //指明数组的大小
		int used;       //指明当前数组中一共有多少个元素有值
	};
}                       //PFArraySavitch
#endif                  //PFARRAY_H
/**********************************************************************************************
1、继承：新的类（基类/父类）从一个已经存在的类（派生类/子类）上创建。
2、派生类自动拥有基类成员变量和所有普通的成员函数，只有在要改变继承而来的成员函数的定义时，
才有必要在派生类的定义中列出该继承而来的函数。
<1>构造函数、复制构造函数、析构函数、私有成员函数、赋值操作符不可被继承；
<2>基类的私有成员变量/函数在基类的声明和实现之外不可直接访问，包括在派生类成员函数定义中；
<3>定义派生类的构造函数时，应该包含对基类构造函数的调用（在构造函数定义的初始化部分）；
3、函数标志=函数名+参数类型序列
函数重定义：在派生类和基类中的函数声明具有相同的参数个数及类型；
函数重载：在派生类和基类中的函数具有不同的参数个数或类型。
4、访问重定义函数的基类版本：（使用带有基类类名的作用域分辨符）
eg:基类Employee，派生类HourlyEmployee，函数prinkcheck在两个类中均有定义，
Employee JaneE; HourlyEmployee SallyH; Sally.Employee::prinkcheck();
5、重载的赋值操作符必须定义为类的成员函数，赋值操作符的两边是同一个对象。
6、一个类可以访问本类的任何对象的私有成员。
7、―――――――――――――――――――――――――――――――――――――――――――――――――
基类中的访问限定符  |          继承类型(派生类定义中类名之后的限定符)
                    |       公有继承       保护继承         私有继承
------------------------------------------------------------------------------------------------------
     public			|		public		   protected			private
					|		公有的		   保护的			私有的(只能在成员/友元函数中通过名字访问)
------------------------------------------------------------------------------------------------------
     protected      |       保护的          保护的          私有的(只能在成员/友元函数中通过名字访问)
-------------------------------------------------------------------------------------------------------
     private        |                     在派生类中不能通过名字访问
-------------------------------------------------------------------------------------------------------
*/