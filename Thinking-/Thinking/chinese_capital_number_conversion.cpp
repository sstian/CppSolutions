/*
	2019.11.02 18:28 - 19:40
	阿拉伯数字转为中文大写数字
eg.	200.00	贰佰元整
	201.15	贰佰零壹元壹角伍分
	1015	壹仟零壹拾伍元整
	200001010200	贰仟亿零壹佰零壹万零贰佰元整
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>  
#include <string>  

using namespace std;

// 表示整数部分的标志  
const int INT_ONLY = 1;
// 表示小数部分的标志  
const int SMALL_ONLY = 2;

// 货币大写形式  
string bigLetter[] = { "零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖" };
// 货币单位  
string unit[] = { "元", "拾", "佰", "仟", "万",		// 万位及其以下
				"拾", "佰", "仟",					// 拾万位到仟万位  
				"亿", "拾", "佰", "仟", "万" };		// 亿位到万亿位 
string small[] = { "分", "角" };

/**
 * 从命令行接收一个数，在其中调用 checkNum() 方法对其进行验证，并返回相应的值
 * @return 如果输入合法，返回输入的这个数
 */
string getNum() 
{
	string s;
	cout << "请输入一个数字（精确到小数点后两位）：" << endl;
	cin >> s;													// 从命令行输入这个浮点数  
	cin.clear();												// 清除输入流状态标志  
	return s;
}

/**
* 判断用户输入的数据是否合法，用户只能输入大于零的数字，不能输入其它字符
* @param s string
* @return 如果用户输入数据合法，返回 true，否则返回 false
*/
bool checkNum(string s) 
{
	double d = atof(s.c_str());
	if (d > 0)							// 只有当用户输入一个大于0的数时，才会返回true  
		return true;
	return false;
}

/**
 * 对传入的数进行四舍五入操作
 * @param s string，从命令行输入的那个数
 * @return 四舍五入后的新值
 */
string roundString(string s) 
{
	// 将这个数转换成 double 类型，并对其进行四舍五入操作  
	// 先转换这个数的整数部分  
	// atof(s.c_str()) 方法的功能是将字符串 s 转换成一个双精度数值并返回结果  
	// c_str()函数返回一个指向正规C字符串的指针, 内容与本字符串相同  
	double d = atof(s.c_str());
	// 将这个数进行四舍五入，保留到小数点后两位  
	// 再将这个数转换成字符串，等待转换  
	int dec, sign;
	// 注意：当这个数转换成字符串以后不会显示小数点，并且会以四舍五入的形式只保留小数点后两位  
	s = _fcvt(d, 2, &dec, &sign);
	// 规定数值的最大长度只能是15位（到万亿位）  
	if (s.length() > 15) 
	{
		cout << "输入数据过大！（整数部分最多13位！）" << endl;
		return "";
	}
	return s;
}

/**
 * 把传入的数转换为中文金额大写形式
 * @param flag int 标志位，1 表示转换整数部分，0 表示转换小数部分
 * @param s string 要转换的字符串
 * @return 转换好的带单位的中文金额大写形式
 */
string formatChinese(int flag, string s) 
{
	int sLength = (int)s.length();			// 用来存放转换后的新字符串  
	if (flag == SMALL_ONLY && s == "00")
		return "整";

	// 逐位替换为中文大写形式  
	string newS = "";
	for (int i = 0; i < sLength; i++)
	{
		if (flag == INT_ONLY) 
		{
			// 转换整数部分为中文大写形式（带单位）  
			newS += bigLetter[s.at(i) - 48] + unit[sLength - i - 1];
		}
		else if (flag == SMALL_ONLY) 
		{
			// 转换小数部分（带单位）  
			newS += bigLetter[s.at(i) - 48] + small[sLength - i - 1];
		}
	}
	return newS;
}

/**
 * 把用户输入的数以小数点为界分割开来，并调用 numFormat() 方法
 * 进行相应的中文金额大写形式的转换
 * 注：传入的这个数应该是经过 roundString() 方法进行了四舍五入操作的
 * @param s string
 * @return 转换好的中文金额大写形式的字符串
 */
string splitNum(string s) 
{
	// 如果传入的是空串则继续返回空串  
	if ("" == s) 
		return "";

	// 截取输入数字的整数部分  
	string intOnly = s.substr(0, s.size() - 2);
	string intPart = formatChinese(1, intOnly);

	// 截取这个数的小数部分  
	string smallOnly = s.substr(s.size() - 2, s.size());
	string smallPart = formatChinese(2, smallOnly);

	// 把转换好了的整数部分和小数部分重新拼凑一个新的字符串  
	string newS = intPart + smallPart;

	return newS;
}

/**
 * 使用给定的 replacement 替换此字符串所有匹配给定的 regex 的子字符串。
 * @param src - 待操作的源字符串
 * @param regex - 用来匹配此字符串的正则表达式
 * @param replacement - 用来替换每个匹配项的字符串
 * @return 替换后的字符串
 */
string replaceAll(string src, string regex, string replacement) 
{
	int length = (int)regex.length();
	while (src.find(regex) < src.length()) 
	{
		// 替换 src 字符串中从第一个匹配 regex 的字符串索引开始的 length 个字符为 replacement 字符串          
		src.replace(src.find(regex), length, replacement);
	}
	return src;
}

/**
 * 把已经转换好的中文金额大写形式加以改进，清理这个字符串里面多余的零，让这个字符串变得更加可观
 * 注：传入的这个数应该是经过 splitNum() 方法进行处理，这个字符串应该已经是用中文金额大写形式表示的
 * @param s string 已经转换好的字符串
 * @return 改进后的字符串
 */
string cleanZero(string s) 
{
	// 如果传入的是空串则继续返回空串  
	if ("" == s) 
		return "";

	// 字符串中存在多个'零'在一起的时候只读出一个'零'，并省略多余的单位  
	/* 由于本人对算法的研究太菜了，只能用4个正则表达式去转换了，各位大虾别介意哈... */
	string regex1[] = { "零仟", "零佰", "零拾" };
	string regex2[] = { "零亿", "零万", "零元" };
	string regex3[] = { "亿", "万", "元" };
	string regex4[] = { "零角", "零分" };

	// 第一轮转换把 "零仟", 零佰","零拾"等字符串替换成一个"零"  
	for (int i = 0; i < 3; i++)
	{
		s = replaceAll(s, regex1[i], "零");
	}
	// 第二轮转换考虑 "零亿","零万","零元"等情况  
	// "亿","万","元"这些单位有些情况是不能省的，需要保留下来  
	for (int i = 0; i < 3; i++) 
	{
		// 当第一轮转换过后有可能有很多个零叠在一起  
		// 要把很多个重复的零变成一个零  
		s = replaceAll(s, "零零零", "零");
		s = replaceAll(s, "零零", "零");
		s = replaceAll(s, regex2[i], regex3[i]);
	}
	// 第三轮转换把"零角","零分"字符串省略  
	for (int i = 0; i < 2; i++) 
		s = replaceAll(s, regex4[i], "");
	// 当"万"到"亿"之间全部是"零"的时候，忽略"亿万"单位，只保留一个"亿"  
	s = replaceAll(s, "亿万", "亿");
	return s;
}

int main() 
{
	cout << "\n------------将数字转换成中文金额的大写形式（C++）------------\n" << endl;
	while (true)
	{
		string s = getNum();
		if (checkNum(s))
		{
			s = roundString(s);
			s = splitNum(s);
			s = cleanZero(s);
			cout << "->" << s << endl << endl;
		}
		else
		{
			cout << "非法输入，程序即将退出" << endl;
			cout << "\n--------------------------------------------------------------" << endl;
			return 0;
		}
	}
}

/*** in:200001010200 out:

------------将数字转换成中文金额的大写形式（C++）------------

请输入一个数字（精确到小数点后两位）：
200001010200
->贰仟亿零壹佰零壹万零贰佰元整

请输入一个数字（精确到小数点后两位）：
***/